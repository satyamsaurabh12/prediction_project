name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository"

      - name: Run Unit Tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Image to Amazon ECR
        env:
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG .
          
          echo "Pushing Docker image to Amazon ECR..."
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Latest Docker Image
        run: |
          echo "Pulling latest Docker image..."
          docker pull ${{ secrets.AWS_ECR_REPO_URI }}:latest

      - name: Stop and Remove Existing Container
        run: |
          CONTAINER_NAME=sensor
          if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
            echo "Stopping existing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME
            docker rm -f $CONTAINER_NAME
          fi

      - name: Run Docker Image
        run: |
          echo "Starting new container..."
          docker run -d -p 8080:8080 --name=sensor \
            -e MONGO_DB_URL=${{ secrets.MONGO_DB_URL }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
            ${{ secrets.AWS_ECR_REPO_URI }}:latest

      - name: Clean Up Unused Images and Containers
        run: |
          echo "Cleaning up old Docker images and containers..."
          docker system prune -f
